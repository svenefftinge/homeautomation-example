/*
 * generated by Xtext
 */
package org.xtext.homeautomation.validation

import org.eclipse.xtext.validation.Check
import org.xtext.homeautomation.rules.Rule
import org.xtext.homeautomation.rules.RulesPackage

//import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RulesValidator extends AbstractRulesValidator {
	
	public static val RECURSION = 'recursion'

	@Check
	def checkEndlessRecursion(Rule rule) {
		val allRules = rule.eContainer.eContents.filter(Rule)
		if (isRecursive(rule.then, rule, allRules)) {
			error('recursive rule detected', rule, RulesPackage.Literals.RULE__THEN, RECURSION)
		}
	}
	
	def boolean isRecursive(org.xtext.homeautomation.rules.State currentState, Rule rule, Iterable<Rule> rules) {
		val triggeredRules = rules.filter[when === currentState].toSet
		if (triggeredRules.isEmpty)
			return false
		else if (triggeredRules.contains(rule))
			return true
		else 
			return triggeredRules.exists[isRecursive(it.then, rule, rules)]
	}
	
}
