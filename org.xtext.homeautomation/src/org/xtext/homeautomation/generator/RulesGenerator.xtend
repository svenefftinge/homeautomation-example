/*
 * generated by Xtext
 */
package org.xtext.homeautomation.generator

import java.util.Scanner
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.homeautomation.rules.Declaration
import org.xtext.homeautomation.rules.Device
import org.xtext.homeautomation.rules.Rule

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RulesGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val simpleClassName = resource.getURI.trimFileExtension.lastSegment
		if (resource.contents?.head == null) {
			return;
		}
		val declarations = resource.contents.head.eContents.filter(Declaration)
		fsa.generateFile(simpleClassName + '.java', '''
			public class «simpleClassName» {
				public static void fire(String event) {
					«FOR device : declarations.filter(Device)»
						«FOR state : device.states»
							if (event.equals("«state.name»")) {
								System.out.println("«device.name» is now «state.name»!");
							}
						«ENDFOR»
					«ENDFOR»
					«FOR rule : declarations.filter(Rule)»
						if (event.equals("«rule.when.name»")) {
							fire("«rule.then.name»");
						}
					«ENDFOR»
				}
				
				public static void main(String... args) {
					try («Scanner.name» scanner = new «Scanner.name»(System.in)) {
						System.out.println("Welcome home!");
						System.out.println("Available commands : ");
						«FOR device : declarations.filter(Device)»
							«FOR state : device.states»
								System.out.println("  «device.name» «state.name»" );
							«ENDFOR»
						«ENDFOR»
						System.out.println("Have fun!");
						while(true) {
							String command = scanner.next();
							«FOR device : declarations.filter(Device)»
								if (command.equalsIgnoreCase("«device.name»")) {
									String secondaryCommand = scanner.next();
									«FOR state : device.states»
										if (secondaryCommand.equalsIgnoreCase("«state.name»")) {
											fire("«state.name»");
										} else 
									«ENDFOR»
									{
										System.out.println("«device.name» can only have the following states: «device.states.map[name].
							join(',')».");
									}
								}
							«ENDFOR»
							if (command.equalsIgnoreCase("bye")) {
								System.out.println("Ciao!");
								break;
							}
						}
					}
				}
			}
		''')
	}

	def ruleMethodName(Rule device) {
		'execute' + device.description.replaceAll('\\W', '_')
	}
}
